#include<iostream>
#include<time.h>
#include <algorithm>
#include <random>
#define NUM_CITIES 5
using namespace std;


/*
int distances[NUM_CITIES][NUM_CITIES] = {
    {0, 476, 797, 513, 429, 1236, 746, 558, 870, 799, 604, 671, 659, 460, 593, 889, 764, 1467, 482, 758, 1105, 295, 453, 1093, 280, 308},
    {476, 0, 1021, 990, 905, 1746, 1263, 1043, 1355, 1284, 1089, 1156, 1144, 945, 1078, 1374, 1249, 1952, 967, 1243, 1590, 590, 748, 1388, 575, 603},
    {797, 1021, 0, 1286, 1202, 2164, 1074, 886, 1198, 1127, 932, 999, 987, 788, 921, 1217, 1092, 2295, 1210, 1486, 1833, 833, 991, 1631, 818, 846},
    {513, 990, 1286, 0, 84, 1693, 1203, 1015, 1327, 1256, 1061, 1128, 1116, 917, 1050, 1346, 1221, 2247, 1062, 1338, 1685, 585, 743, 1383, 570, 598},
    {429, 905, 1202, 84, 0, 1609, 1119, 931, 1243, 1172, 977, 1044, 1032, 833, 966, 1262, 1137, 2225, 977, 1253, 1600, 500, 658, 1298, 485, 513},
    {1236, 1746, 2164, 1693, 1609, 0, 1950, 1762, 2074, 2003, 1808, 1875, 1863, 1664, 1797, 2093, 1968, 2981, 1796, 2072, 2419, 919, 1077, 2217, 904, 932},
    {746, 1263, 1074, 1203, 1119, 1950, 0, 288, 600, 529, 334, 401, 389, 190, 323, 619, 494, 1797, 312, 588, 935, 525, 683, 1323, 510, 538},
    {558, 1043, 886, 1015, 931, 1762, 288, 0, 312, 241, 46, 113, 101, 98, 231, 527, 402, 1605, 124, 400, 747, 337, 495, 1135, 322, 350},
    {870, 1355, 1198, 1327, 1243, 2074, 600, 312, 0, 71, 266, 333, 321, 122, 255, 551, 426, 1629, 206, 482, 829, 419, 577, 1217, 404, 432},
    {799, 1284, 1127, 1256, 1172, 2003, 529, 241, 71, 0, 195, 262, 250, 51, 184, 480, 355, 1558, 135, 411, 758, 348, 506, 1146, 333, 361},
    {604, 1089, 932, 1061, 977, 1808, 334, 46, 266, 195, 0, 67, 55, 154, 287, 583, 458, 1661, 190, 466, 813, 403, 561, 1201, 388, 416},
    {671, 1156, 999, 1128, 1044, 1875, 401, 113, 333, 262, 67, 0, 12, 211, 344, 640, 515, 1718, 257, 533, 880, 470, 628, 1268, 455, 483},
    {659, 1144, 987, 1116, 1032, 1863, 389, 101, 321, 250, 55, 12, 0, 199, 332, 628, 503, 1706, 245, 521, 868, 458, 616, 1256, 443, 471},
    {460, 945, 788, 917, 833, 1664, 190, 98, 122, 51, 154, 211, 199, 0, 133, 429, 304, 1507, 56, 310, 657, 247, 405, 1045, 232, 260},
    {593, 1078, 921, 1050, 966, 1797, 323, 231, 255, 184, 287, 344, 332, 133, 0, 296, 171, 1374, 189, 465, 812, 402, 560, 1200, 387, 415},
    {889, 1374, 1217, 1346, 1262, 2093, 619, 527, 551, 480, 583, 640, 628, 429, 296, 0, 125, 1128, 485, 761, 1108, 698, 856, 1496, 683, 711},
    {764, 1249, 1092, 1221, 1137, 1968, 494, 402, 426, 355, 458, 515, 503, 304, 171, 125, 0, 1103, 360, 636, 983, 573, 731, 1371, 558, 586},
    {1467, 1952, 2295, 2247, 2225, 2981, 1797, 1605, 1629, 1558, 1661, 1718, 1706, 1507, 1374, 1128, 1103, 0, 1463, 1739, 2086, 1586, 1744, 2143, 1430, 1458},
    {482, 967, 1210, 1062, 977, 1796, 312, 124, 206, 135, 190, 257, 245, 56, 189, 485, 360, 1463, 0, 276, 623, 213, 371, 1011, 198, 226},
    {758, 1243, 1486, 1338, 1253, 2072, 588, 400, 482, 411, 466, 533, 521, 310, 465, 761, 636, 1739, 276, 0, 347, 563, 721, 1361, 548, 576},
    {1105, 1590, 1833, 1685, 1600, 2419, 935, 747, 829, 758, 813, 880, 868, 657, 812, 1108, 983, 2086, 623, 347, 0, 700, 858, 1498, 685, 713},
    {295, 590, 833, 585, 500, 919, 525, 337, 419, 348, 403, 470, 458, 247, 402, 698, 573, 1586, 213, 563, 700, 0, 158, 798, 115, 143},
    {453, 748, 991, 743, 658, 1077, 683, 495, 577, 506, 561, 628, 616, 405, 560, 856, 731, 1744, 371, 721, 858, 158, 0, 1140, 327, 355},
    {1093, 1388, 1631, 1383, 1298, 2217, 1323, 1135, 1217, 1146, 1201, 1268, 1256, 1045, 1200, 1496, 1371, 2143, 1011, 1361, 1498, 798, 1140, 0, 1213, 1241},
    {280, 575, 818, 570, 485, 904, 510, 322, 404, 333, 388, 455, 443, 232, 387, 683, 558, 1430, 198, 548, 685, 115, 327, 1213, 0, 28},
    {308, 603, 846, 598, 513, 932, 538, 350, 432, 361, 416, 483, 471, 260, 415, 711, 586, 1458, 226, 576, 713, 143, 355, 1241, 28, 0},

};
string provinces[NUM_CITIES] ={"Tehran", "Alborz", "Isfahan", "Gilan", "Mazandaran", "Fars", "Khuzestan", "Qazvin",
    "Kermanshah", "Kerman", "East Azerbaijan", "Hormozgan", "Lorestan", "Ardabil", "Yazd",
     "Hamadan", "Kohgiluyeh and Boyer-Ahmad", "Markazi", "Zanjan", "Semnan", "Ilam", "Kurdistan",
      "Chaharmahal and Bakhtiari", "Razavi Khorasan", "North Khorasan", "South Khorasan"};
*/



string provinces[NUM_CITIES] = {"Tehran", "Isfahan", "Mazandaran", "Fars", "Khorasan Razavi"};
int distances[NUM_CITIES][NUM_CITIES] = {
        {0, 370, 150, 560, 850},
        {370, 0, 420, 340, 980},
        {150, 420, 0, 610, 900},
        {560, 340, 610, 0, 1300},
        {850, 980, 900, 1300, 0}
    };

int calculate_cost(int path[]) {
    int cost = 0;
    for (int i = 0; i < NUM_CITIES-1; i++) {
        cost += distances[path[i]][path[i+1]];
    }
    cost += distances[path[NUM_CITIES-1]][path[0]];
    return cost;
}


int main() {
    srand(time(NULL));
    int path[NUM_CITIES];
    for (int i = 0; i < NUM_CITIES; i++) {
        path[i] = i;
    }
    random_shuffle(path+1, path+NUM_CITIES-1);

    int initial_cost = calculate_cost(path);

    double temperature = 100000;
    double cooling_rate = 0.003;

    int current_path[NUM_CITIES];
    for (int i = 0; i < NUM_CITIES; i++) {
        current_path[i] = path[i];
    }
    int current_cost = initial_cost;

    while (temperature > 1) {
        int new_path[NUM_CITIES];
        for (int i = 0; i < NUM_CITIES; i++) {
            new_path[i] = current_path[i];
        }
        int index1 = rand() % (NUM_CITIES-1) + 1;
        int index2 = rand() % (NUM_CITIES-1) + 1;
        while (index1 == index2) {
            index2 = rand() % (NUM_CITIES-1) + 1;
        }
        int temp = new_path[index1];
        new_path[index1] = new_path[index2];
        new_path[index2] = temp;
        int new_cost = calculate_cost(new_path);
        int delta_cost = new_cost - current_cost;
        if (delta_cost < 0 || exp(-delta_cost/temperature) > (double)rand()/RAND_MAX) {
            for (int i = 0; i < NUM_CITIES; i++) {
                current_path[i] = new_path[i];
            }
            current_cost = new_cost;
        }
        temperature *= (1 - cooling_rate);
    }

    cout << "Best path found: ";
    for (int i = 0; i < NUM_CITIES; i++) {
        cout << provinces[current_path[i]] << "-> ";
    }
    cout << provinces[current_path[0]];
    cout << endl;
    cout << "Cost: " << current_cost <<"km" <<endl;

    return 0;
}
